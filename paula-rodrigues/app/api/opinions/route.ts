import { db } from "@/lib/firebase";
import { collection, addDoc, getDocs } from "firebase/firestore";
import { NextResponse } from "next/server";

// Defini√ß√£o do tipo Opinion
type Opinion = {
    id: string;
    name: string;
    comment: string;
    rating: number;
    work: boolean;
    date: string;
    approved: boolean;
};

// M√©todo GET - Obter todas as opini√µes aprovadas
export async function GET() {
    try {
        const opinionsRef = collection(db, "opinions");
        const snapshot = await getDocs(opinionsRef);

        if (snapshot.empty) {
            return NextResponse.json([], { status: 200 });
        }

        // Mapear os documentos para objetos, garantindo que `approved` existe
        const approvedOpinions = snapshot.docs
            .map((doc) => {
                const data = doc.data() as Partial<Opinion>; // Cast seguro para evitar erros
                return {
                    id: doc.id,
                    name: data.name ?? "An√¥nimo",
                    comment: data.comment ?? "",
                    rating: data.rating ?? 0,
                    work: Boolean(data.work),
                    date: data.date ?? new Date().toISOString(),
                    approved: data.approved ?? false, // Garante que `approved` existe
                };
            })
            .filter((opinion) => opinion.approved); // Filtrar apenas os aprovados

        return NextResponse.json(approvedOpinions, { status: 200 });

    } catch (error) {
        console.error("üî• Erro ao buscar opini√µes:", error);
        return NextResponse.json({ error: "Erro ao obter opini√µes." }, { status: 500 });
    }
}

// M√©todo POST - Adicionar uma nova opini√£o (n√£o aprovada por padr√£o)
export async function POST(req: Request) {
    try {
        const { name, comment, rating, work } = await req.json();

        // Valida√ß√£o dos dados obrigat√≥rios
        if (!name || !comment || rating === undefined) {
            return NextResponse.json({ error: "Nome, coment√°rio e avalia√ß√£o s√£o obrigat√≥rios." }, { status: 400 });
        }

        const newOpinion: Omit<Opinion, "id"> = {
            name,
            comment,
            rating: Number(rating), // Converte para n√∫mero para evitar erros
            work: Boolean(work), // Garante que `work` √© booleano
            approved: false, // Sempre come√ßa como n√£o aprovado
            date: new Date().toISOString(), // Salva a data atual
        };

        await addDoc(collection(db, "opinions"), newOpinion);

        return NextResponse.json({ message: "Coment√°rio enviado para aprova√ß√£o!" }, { status: 201 });
    } catch (error) {
        return NextResponse.json({ error: "Erro ao enviar opini√£o." }, { status: 500 });
    }
}
